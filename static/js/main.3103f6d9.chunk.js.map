{"version":3,"sources":["App.js","Cardbody.js","serviceWorker.js","index.js"],"names":["App","props","handlechangeall","event","setState","target","name","value","buttonClick","e","errors","lovedata","Math","random","floor","state","yourname","crushname","result","className","type","this","onChange","placeholder","onClick","Component","Cardbody","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAuFeA,E,YAlFd,WAAYC,GAAS,IAAD,8BAClB,4CAAMA,KASRC,gBAAkB,SAACC,GAClB,EAAKC,SAAL,eAAkBD,EAAME,OAAOC,KAAMH,EAAME,OAAOE,SAX/B,EAgBpBC,YAAc,SAAAC,GACb,IAAIC,EAAS,GAGTC,EAA2B,IAAhBC,KAAKC,SACpBF,EAAWC,KAAKE,MAAMH,GAIf,EAAKI,MAAMC,WACXN,EAAS,oBAIP,EAAKK,MAAME,YAEbP,EAAO,qBAKA,KAAXA,GAEF,EAAKN,SAAS,CAACc,OAAOR,IAET,KAAXA,GAEF,EAAKN,SAAS,CAACc,OAAOP,EAAS,OAxC/B,EAAKI,MAAQ,CAAGG,OAAS,GACnBF,SAAW,GACZC,UAAY,IALC,E,sEAiDhB,OACG,6BACM,0BAAME,UAAU,+BACd,yBAAKA,UAAU,eACd,2BAAOC,KAAK,OAAOd,KAAK,WAAWC,MAAOc,KAAKN,MAAMC,SACpDM,SAAUD,KAAKnB,gBAAiBiB,UAAU,uDAC1CI,YAAY,eAEd,6BAAM,6BACN,6BACT,yBAAKJ,UAAU,cACL,2BAAOC,KAAK,OAAOd,KAAK,YAAYC,MAAOc,KAAKN,MAAME,UACrDK,SAAUD,KAAKnB,gBAAiBiB,UAAU,uDAC1CI,YAAY,iBAGf,6BAEA,yBAAKJ,UAAU,eACd,4BAAQC,KAAK,SAASD,UAAU,uBAAuBK,QAAWH,KAAKb,aAAvE,UAGD,6BACA,6BACA,2BAAOY,KAAK,OAAOd,KAAK,YAAYC,MAAOc,KAAKN,MAAMG,OAAQC,UAAU,mDACxEI,YAAY,0B,GA5ETE,aCkBHC,G,uLAfb,OAAO,yBAAKP,UAAU,gCAGR,yBAAKA,UAAU,oCAAf,mBAEA,yBAAKA,UAAU,qCACf,kBAAC,EAAD,OAIA,yBAAKA,UAAU,4BAAf,oC,GAZOM,cCQHE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SD2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3103f6d9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n//import './App.css'\n\nclass App extends Component{\n\n\tconstructor(props)  {\n\t\t\tsuper(props);\n\n\t\t\tthis.state = { \tresult : '',\n\t\t\t  \t\t\t\tyourname : '',\n\t\t\t \t\t\t\tcrushname : '',\n\t\t\t  \t\t\t\t\n\t\t\t\t\t\t}\n\t\t}\n\n\thandlechangeall = (event) =>{\n\t\tthis.setState ({ [event.target.name]:event.target.value})\n\t\t//this.setState({[event.target.lovevalue]:lovedata})\n\t}\n\n\t\n\tbuttonClick = e => {\n\t\tlet errors = \"\";\n\t//\tvar nameError = \" Enter Your Name\";\n\t//\tvar crushError = \" Enter Crush Name\";\n\t\tvar lovedata = Math.random() * 100;\n\t\tlovedata = Math.floor(lovedata);\n\t//\tthis.setState({result:lovedata+\"%\"});\n\n\n\t\t\t\t\tif(!this.state.yourname){\n\t\t\t  \t\t\t\terrors = \" Enter Your Name\";\n\t\t\t  \t\t\t\t//this.setState({ [this.state.errors]:nameError})\n\t\t\t  \t\t\t\t\n\t\t\t  \t\t\t}\n\t\t\t  \t\tif(!this.state.crushname){\n\t\t\t  \t\t\t\t//crushError = \" Enter Crush Name\";\n\t\t\t  \t\t\t\terrors=\" Enter Crush Name\";\n\t\t\t  \t\t\t\t//this.setState({ [this.state.errors]:crushError})\n\t\t\t  \t\t\t\t\n\t\t\t  \t\t\t}\n\n\t\tif(errors !== \"\") {\n\t\t\t\n\t\t\tthis.setState({result:errors });\n\t\t} \n\t\tif(errors === \"\") {\n\t\t\t\n\t\t\tthis.setState({result:lovedata+\"%\"});\n\t\t}  \n\n\t}\n\n\trender(){\n  \t\t\treturn (\n    \t\t\t\t<div >\n          \t\t\t\t<form className=\"form-inline w-75 m-auto row\">\n            \t\t\t\t<div className=\"form-group \">\n            \t\t\t\t\t<input type=\"text\" name=\"yourname\" value={this.state.yourname}\n            \t\t\t\t\t onChange={this.handlechangeall} className=\"form-control text-center col-xs-6 col-sm-8 col-lg-12\" \n            \t\t\t\t\t placeholder=\"Your Name\" />\n            \t\t\t\t</div>\n            \t\t\t\t<br /><br/>\n            \t\t\t\t<br/>\n\t\t\t\t\t\t\t<div className=\"form-group\">\n            \t\t\t\t\t<input type=\"text\" name=\"crushname\" value={this.state.crushname}\n            \t\t\t\t\t onChange={this.handlechangeall} className=\"form-control text-center col-xs-6 col-sm-8 col-lg-12\" \n            \t\t\t\t\t placeholder=\"Crush Name\"/>\n            \t\t\t\t</div>\n            \t\t\t</form>\n          \t\t\t\t\t<br />\n\n          \t\t\t\t\t<div className=\"w-75 m-auto\">\n          \t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-success w-50\" onClick = {this.buttonClick}>Click</button>\n          \t\t\t\t\t</div>\n          \t\t\t\t\t\n          \t\t\t\t\t<br />\n          \t\t\t\t\t<div>\n          \t\t\t\t\t<input type=\"text\" name=\"lovevalue\" value={this.state.result} className=\"form-control text-center text-danger w-70 m-auto\" \n          \t\t\t\t\tplaceholder=\"Love Percentage\"/>\n          \t\t\t\t\t</div>\n          \t\t\t\t\t\n   \t\t\t\t\t</div>\n  \t\t\t\t\t);\n\t\t}\n}\t\t\n\nexport default App;\n\n\n","import React,{Component} from 'react';\r\nimport App from './App';\r\nimport './cardbody.css';\r\n\r\nclass Cardbody extends Component{\r\n\trender(){\r\n\t\treturn <div className=\"card w-50 m-auto text-center\" >\r\n              \r\n\t\t            \r\n                <div className=\"card-header bg-danger text-white\">Love Calculator</div>\r\n                \r\n                <div className=\"card-body w-50 m-auto text-center\">\r\n          \t\t\t   <App />\r\n                </div>\r\n                \r\n          \t\t\t\r\n                <div className=\"card-footer bg-secondary\">God Bless Your Relationship</div>\r\n\t\t       </div>\r\n\t}\r\n}\r\n\r\nexport default Cardbody;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Cardbody from './Cardbody';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Cardbody />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}